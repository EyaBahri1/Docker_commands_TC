
---

A Dockerfile is used to create a specific image, based on another image.

You can add commands directly into a file named "Dockerfile", then run it to build the image.

After each modification of the Dockerfile, you need to perform a "build" to update the image.

---

## Commands in the Dockerfile:

COPY:  
Copies files from the host system to the Docker image.

ADD:  
Copies files/directories from the host system to the Docker image.

ENV:  
Adds an environment variable.

RUN (BUILD TIME):  
Specifies a command to execute during the image build.  
(Example: RUN apt update && apt install vim)

CMD (RUNTIME):  
Not to be confused with RUN, this instruction runs a command when the container starts.

EXPOSE:  
Exposes a TCP port to the host system.

FROM:  
Downloads an image from Docker Hub.

VOLUME:  
Creates a volume from a Dockerfile (but I prefer doing this via:  
- Terminal  
- Docker Compose)

WORKDIR:  
Creates a working directory.

---

## Build the Docker Image:

docker build -t <image-name> <path_to_dockerfile>

## Push the Image to Docker Hub:

1. Login to Docker Hub:  

docker login -u <dockerhub-username>
  
Example: `docker login -u eyabahri14`

2. Tag the Image:  

docker tag <local-image-id> <dockerhub-username>/<repository-name>:latest
  
Example: `docker tag 51414eeedd49 eyabahri14/saveursdefatma:latest`

3. Push the Image:  

docker push <dockerhub-username>/<repository-name>:<tag>
  
Example: `docker push eyabahri14/saveursdefatma:latest`

---

## Method 2:


# Build the image with a new tag
docker build -t <registry>/<repository>:<tag> .

# Log in to the registry (if needed)
docker login <registry>

# Push the tagged image to the registry
docker push <registry>/<repository>:<tag>
